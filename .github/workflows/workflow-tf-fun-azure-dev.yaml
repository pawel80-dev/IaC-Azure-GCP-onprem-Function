name: TF_Azure_Function_dev

on:
  push:
  # run automatically on push to main or dev branch
    branches:
      # - 'main'
      - 'dev'

  # run manually for Terraform destroy
  workflow_dispatch:
    inputs:
      terraform_env_remove:
        description: 'Terraform delete'
        required: true
        type: boolean

# Permission to request the OIDC JWT ID token (Azure Authentication)
permissions:
  id-token: write  # Required for OIDC
  contents: read   # Required for checkout

env:
  TF_TFVARS: 'dev.tfvars'
  TF_DIR: 'terraform/azure'
  AZURE_FUNC_APP_NAME: 'tf-dev-func-app'
  AZURE_FUNC_APP_PATH: 'source'
  PYTHON_VERSION: '3.13'
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUB_ID }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    # runs-on: self-hosted
    environment: development
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v5

      # Login to Azure CLI using OIDC (no secrets needed)
      # Action receives a JWT from the GitHub OIDC provider, and then requests an access token from Azure.
      - name: 'Azure CLI login'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUB_ID }}

      # Install Terraform, provide credentials to the cloud
      # Terraform API driven workflow
      - name: 'Terraform initial setup'
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TEAM_TOKEN }}
          terraform_version: 1.13.3

      # Format terraform configuration files into a canonical format and style
      - name: 'Terraform Format'
        working-directory: ${{ env.TF_DIR }}
        id: fmt
        run: terraform fmt
 
      # Initializes a working directory containing Terraform configuration files
      - name: 'Terraform Init'
        working-directory: ${{ env.TF_DIR }}
        id: init
        run: terraform init
       
      # Validates the configuration files in a directory, referring only to the configuration and not accessing any remote services such as remote state, etc.
      - name: 'Terraform Validate'
        working-directory: ${{ env.TF_DIR }}
        id: validate
        # -no-color -> Disables terminal formatting sequences in the output
        run: terraform validate -no-color

      # Creates an execution plan, which lets you preview the changes that Terraform plans to make to your infrastructure
      - name: 'Terraform Plan'
        working-directory: ${{ env.TF_DIR }}
        id: plan
        run: terraform plan -no-color -var-file=${{ env.TF_TFVARS }}
        # continue-on-error: true

      # Executes the actions proposed in a Terraform plan
      - name: 'Terraform Apply'
        working-directory: ${{ env.TF_DIR }}
        # -auto-approve -> instruct Terraform to apply the plan without asking for confirmation
        # -input=false -> Disables Terraform's default behavior of prompting for input
        run: terraform apply -auto-approve -input=false -var-file=${{ env.TF_TFVARS }}

      - name: 'Terraform Destroy'
        if: ${{ github.event.inputs.terraform_env_remove == 'true' }}
        working-directory: ${{ env.TF_DIR }}
        run: terraform destroy --auto-approve
