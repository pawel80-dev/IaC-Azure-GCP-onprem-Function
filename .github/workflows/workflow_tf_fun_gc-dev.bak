name: TF_GC_Function_dev

on:
  push:
    branches:
      - 'dev'

# Permission to request the OIDC JWT ID token (Azure Authentication)
permissions:
  id-token: write  # Required for OIDC
  contents: read   # Required for checkout

env:
  TF_DIR: 'terraform/gc'
  TF_TFVARS: 'dev.tfvars'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    # runs-on: self-hosted
    environment: development
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v5

      # GitHub OIDC token expires in 5 minutes
      # without service_account GitHub Action will use Direct Workload Identity Federation
      - name: 'Google Cloud CLI login'
        uses: 'google-github-actions/auth@v3'
        with:
          # project_id: 'my-project' # optional
          workload_identity_provider: 'projects/716912316033/locations/global/workloadIdentityPools/github/providers/my-repo'

      # Install Terraform, provide credentials to the cloud (for state control)
      # Terraform API driven workflow
      - name: 'Terraform initial setup'
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TEAM_TOKEN }}
          terraform_version: 1.13.3

      # Format terraform configuration files into a canonical format and style
      - name: 'Terraform Format'
        working-directory: ${{ env.TF_DIR }}
        id: fmt
        run: terraform fmt
 
      # Initializes a working directory containing Terraform configuration files
      - name: 'Terraform Init'
        working-directory: ${{ env.TF_DIR }}
        id: init
        run: terraform init
       
      # Validates the configuration files in a directory, referring only to the configuration and not accessing any remote services such as remote state, etc.
      - name: 'Terraform Validate'
        working-directory: ${{ env.TF_DIR }}
        id: validate
        # -no-color -> Disables terminal formatting sequences in the output
        run: terraform validate -no-color

      # Creates an execution plan, which lets you preview the changes that Terraform plans to make to your infrastructure
      - name: 'Terraform Plan'
        working-directory: ${{ env.TF_DIR }}
        id: plan
        run: terraform plan -no-color -var-file=${{ env.TF_TFVARS }}
        # continue-on-error: true

      # # Creates an execution plan, which lets you preview the changes that Terraform plans to make to your infrastructure
      # - name: 'Terraform Plan'
      #   working-directory: ${{ env.TF_DIR }}
      #   id: plan
      #   run: terraform plan -no-color
      #   continue-on-error: true
      #   env:
      #     GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

      # # Executes the actions proposed in a Terraform plan
      # - name: 'Terraform Apply'
      #   working-directory: ${{ env.TF_DIR }}
      #   # -auto-approve -> instruct Terraform to apply the plan without asking for confirmation
      #   # -input=false -> Disables Terraform's default behavior of prompting for input
      #   run: terraform apply -auto-approve -input=false
      #   env:
      #     GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
